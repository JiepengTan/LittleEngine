#pragma once
{{#include_headfiles}}
#include "{{headfile_name}}"
{{/include_headfiles}}

{{#class_defines}}
    {{#class_is_enum}}
namespace LittleEngine{

    std::vector<std::string> EnumNameVector_{{class_full_code_name}}(){
       return std::vector<std::string>{
        {{#class_field_defines}} "{{class_field_name}}",
        {{/class_field_defines}}  
       };
    }
    std::vector<int64_t> EnumValueVector_{{class_full_code_name}}(){
       return std::vector<int64_t>{
        {{#class_field_defines}} (int64_t){{class_full_name}}::{{class_field_name}},
        {{/class_field_defines}}  
       };
    }

    std::vector<std::string> EnumNameVector({{class_full_name}} instance){
       return EnumNameVector_{{class_full_code_name}}();
    }
    std::vector<int64_t> EnumValueVector({{class_full_name}} instance){
       return EnumValueVector_{{class_full_code_name}}();
    }



    void EnumFromString_{{class_full_code_name}}(const std::string& strValue,void* instance){
        {{class_full_name}} value;
        while (true)
        {
        {{#class_field_defines}}   if(strValue == "{{class_field_name}}"){ value = {{class_full_name}}::{{class_field_name}}; break;}
        {{/class_field_defines}}  
            LOG_ERROR("unknown type  {{class_full_name}} " + strValue); return;
        }
        *(({{class_full_name}}*)instance) = value;
    }
    std::string EnumToString_{{class_full_code_name}}(void* instance){
        {{class_full_name}}& value = *(({{class_full_name}}*)instance);
        while (true)
        {
        {{#class_field_defines}}   if(value == {{class_full_name}}::{{class_field_name}}) return "{{class_field_name}}";
        {{/class_field_defines}}  
            break;
        }
        LOG_ERROR("unknown type  {{class_full_name}} " + std::to_string((int64_t)instance));
        return "" ;
    }
    
    void EnumFromString(const std::string& strValue,{{class_full_name}}& instance){
       EnumFromString_{{class_full_code_name}}(strValue,&instance);
    }

    std::string EnumToString({{class_full_name}} instance){
        return EnumToString_{{class_full_code_name}}(&instance) ;
    }
}
    {{/class_is_enum}}

    {{^class_is_enum}}
namespace {{class_namespace}}{
    TypeID {{class_name}}::MetaTypeId = {{class_type_id}};
    {{#class_is_struct}}struct {{class_name}}; {{/class_is_struct}}{{^class_is_struct}}class {{class_name}}; {{/class_is_struct}}
    std::string {{class_name}}::ToString(){ return ToJson().dump();}
    Json {{class_name}}::ToJson(){ return LittleEngine::JsonSerializer::Write(*this);}
}
    {{/class_is_enum}}

{{/class_defines}}

{{#class_defines}}
namespace {{class_namespace}}::MetaCodeGen{
    class TypeOperator_{{class_name}}{
    public:
    {{#class_is_enum}}
        static void* ConstructorWithJson(const Json& jsonContext){
            int64_t value = 0;
            LittleEngine::JsonSerializer::Read(jsonContext, value);
            {{class_name}}* ret_instance= new {{class_name}};
            *ret_instance = ({{class_name}})({{class_enum_type_name}})value;
            return ret_instance;
        }
        static Json WriteByName(void* instance){
            int64_t value = (int64_t)(*({{class_name}}*)instance);
            return LittleEngine::JsonSerializer::Write(value);
        }
        static bool IsEnum(){ return true; }
    {{/class_is_enum}}
    {{^class_is_enum}}
        static void* ConstructorWithJson(const Json& jsonContext){
            {{class_name}}* ret_instance= new {{class_name}};
            LittleEngine::JsonSerializer::Read(jsonContext, *ret_instance);
            return ret_instance;
        }
        static Json WriteByName(void* instance){
            return LittleEngine::JsonSerializer::Write(*({{class_name}}*)instance);
        }
        static bool IsEnum(){ return false; }
    {{/class_is_enum}}

        static std::string GetClassName(){ return "{{class_name}}";}
        
        static bool IsAbstract(){ return {{class_is_abstract}} ;}
        
        static std::map<std::string,std::string> GetMetaData(){ return std::map<std::string,std::string>{ {{{class_meta_datas}}} };}

        static std::vector<TypeID> GetBaseClassIds(){
            std::vector<TypeID> baseIds ;
            {{#class_base_class_defines}}baseIds.push_back({{class_base_class_name}}::MetaTypeId); {{/class_base_class_defines}}
            return baseIds;
        };
        static void* ConstructorNew(){
            return new {{class_name}};
        }
        
        
        // fields
        {{#class_field_defines}}  
    {{#class_is_enum}}
        static void Set_{{class_field_name}}(void* instance, void* field_value){ 
            //int64_t value = *((int64_t*) (field_value));
            //static_cast<{{class_name}}*>(instance)->{{class_field_name}} = ({{class_enum_type_name}})value;
        }
        static void* Get_{{class_field_name}}(void* instance){ 
            // TODO this is not mutilthread safe!!
            //static int64_t tempval;
            //tempval = (int64_t)(static_cast<{{class_name}}*>(instance)->{{class_field_name}});
            //return static_cast<void*>(&tempVal);
            return instance;
        }
    
    {{/class_is_enum}}
    {{^class_is_enum}}    
        static void Set_{{class_field_name}}(void* instance, void* field_value){ 
            {{#class_field_is_array}}memcpy(&static_cast<{{class_name}}*>(instance)->{{class_field_name}},field_value,sizeof({{class_name}}::{{class_field_name}}));{{/class_field_is_array}}
            {{#class_field_is_vector}}memcpy(&static_cast<{{class_name}}*>(instance)->{{class_field_name}},field_value,sizeof({{class_name}}::{{class_field_name}}));{{/class_field_is_vector}}
            {{#class_field_is_not_container}}static_cast<{{class_name}}*>(instance)->{{class_field_name}} = *static_cast<{{{class_field_type}}}*>(field_value);{{/class_field_is_not_container}} 
         }
        static void* Get_{{class_field_name}}(void* instance){ return static_cast<void*>(&(static_cast<{{class_name}}*>(instance)->{{class_field_name}}));}
    {{/class_is_enum}}
        static std::string GetFieldName_{{class_field_name}}(){ return "{{class_field_name}}";}
        static std::string GetFieldTypeName_{{class_field_name}}(){ return "{{{class_field_type}}}";}
        static bool IsVector_{{class_field_name}}(){ {{#class_field_is_vector}}return true;{{/class_field_is_vector}}{{^class_field_is_vector}}return false;{{/class_field_is_vector}} }
        static bool IsArray_{{class_field_name}}(){ {{#class_field_is_array}}return true;{{/class_field_is_array}}{{^class_field_is_array}}return false;{{/class_field_is_array}} }
        static std::map<std::string,std::string> GetFieldMetaData_{{class_field_name}}(){ return std::map<std::string,std::string>{ {{{class_field_meta_datas}}} };}
        static bool IsEnum_{{class_field_name}}(){ {{#class_field_is_enum}}return true;{{/class_field_is_enum}}{{^class_field_is_enum}}return false;{{/class_field_is_enum}} }
        
        {{/class_field_defines}}

        // methods
        {{#class_method_defines}}
        static std::string GetMethodName_{{class_method_name}}(){ return "{{class_method_name}}";}
        static std::map<std::string,std::string> GetMethodMetaData_{{class_method_name}}(){ return std::map<std::string,std::string>{ {{{class_mothod_meta_datas}}} };}
        static std::vector<std::string> GetMethodParamTypes_{{class_method_name}}(){ return std::vector<std::string>{ {{{class_method_param_types}}} } ;}
        static std::string GetMethodReturnType_{{class_method_name}}(){ return "{{class_method_return_type}}";}
        static void InvokeFullVoid_{{class_method_name}}(void* retValPtr, void* instance{{#class_mothod_has_params}}, {{/class_mothod_has_params}} {{class_method_void_declare}} ) { 
            {{#class_mothod_has_return}}   *(  ({{ class_method_return_type }}*) retValPtr) = {{/class_mothod_has_return}} 
            static_cast<{{class_name}}*>(instance)->{{class_method_name}}({{class_method_void_call}}) ;
        }
        static void InvokeCorrectVoid_{{class_method_name}}(void* retValPtr, void* instance{{#class_mothod_has_params}}, {{/class_mothod_has_params}} {{class_method_normal_declare}} ) { 
            {{#class_mothod_has_return}}   *(  ({{ class_method_return_type }}*) retValPtr) = {{/class_mothod_has_return}} 
            static_cast<{{class_name}}*>(instance)->{{class_method_name}}({{class_method_normal_call}}) ;
        }
        static void InvokeVoid_{{class_method_name}}(void* retValPtr, void* instance,void* _1,void* _2 ,void* _3,void* _4,void* _5 ,void* _6  ) { 
            {{#class_mothod_has_return}}   *(  ({{ class_method_return_type }}*) retValPtr) = {{/class_mothod_has_return}} 
            static_cast<{{class_name}}*>(instance)->{{class_method_name}}({{class_method_void_call}}) ;
        }

        {{/class_method_defines}}
    };

{{#vector_exist}}
    {{#vector_defines}}
#ifndef ArrayOperator_{{vector_useful_name}}MACRO
#define ArrayOperator_{{vector_useful_name}}MACRO
    class ArrayOperator_{{vector_useful_name}}{
        public:
            static std::string GetArrayTypeName(){ return "{{{vector_type_name}}}";}
            static std::string GetElementTypeName(){ return "{{{vector_element_type_name}}}";}
            static int GetSize(void* instance){
                //todo: should check validation
                return static_cast<int>(static_cast<{{{vector_type_name}}}*>(instance)->size());
            }
            static void* Get(int index,void* instance){
                //todo: should check validation
                return static_cast<void*>(&((*static_cast<{{{vector_type_name}}}*>(instance))[index]));
            }
            static void Set(int index, void* instance, void* element_value){
                //todo: should check validation
                (*static_cast<{{{vector_type_name}}}*>(instance))[index] = *static_cast<{{{vector_element_type_name}}}*>(element_value);
            }
    };
#endif ArrayOperator_{{vector_useful_name}}MACRO
    {{/vector_defines}}
{{/vector_exist}}

}
{{/class_defines}}

 {{#class_defines}}
 namespace {{class_namespace}}::MetaCodeGen{
    void TypeWrapperRegister_{{class_name}}(){
        // register field info
        {{#class_field_defines}}
        LittleEngine::Reflection::FieldFunctionTuple* field_function_tuple_{{class_field_name}}=new LittleEngine::Reflection::FieldFunctionTuple{
            &TypeOperator_{{class_name}}::Set_{{class_field_name}},
            &TypeOperator_{{class_name}}::Get_{{class_field_name}},
            &TypeOperator_{{class_name}}::GetClassName,
            &TypeOperator_{{class_name}}::GetFieldName_{{class_field_name}},
            &TypeOperator_{{class_name}}::GetFieldTypeName_{{class_field_name}},
            &TypeOperator_{{class_name}}::IsArray_{{class_field_name}},
            &TypeOperator_{{class_name}}::GetFieldMetaData_{{class_field_name}},
            &TypeOperator_{{class_name}}::IsEnum_{{class_field_name}}
            };
        META_REGISTER_FIELD_TO_MAP("{{class_full_name}}", field_function_tuple_{{class_field_name}});
        {{/class_field_defines}}

        // register function info
        {{#class_method_defines}}
        LittleEngine::Reflection::MethodFunctionTuple* method_function_tuple_{{class_method_name}}=new LittleEngine::Reflection::MethodFunctionTuple{
            &TypeOperator_{{class_name}}::GetMethodName_{{class_method_name}},
            &TypeOperator_{{class_name}}::GetMethodMetaData_{{class_method_name}},
            &TypeOperator_{{class_name}}::InvokeVoid_{{class_method_name}},
            &TypeOperator_{{class_name}}::GetMethodReturnType_{{class_method_name}},
            &TypeOperator_{{class_name}}::GetMethodParamTypes_{{class_method_name}},
            };
        META_REGISTER_Method_TO_MAP("{{class_full_name}}", method_function_tuple_{{class_method_name}} );
        {{/class_method_defines}}

        // register array info
    {{#vector_exist}}
        {{#vector_defines}}
        LittleEngine::Reflection::ArrayFunctionTuple* array_tuple_{{vector_useful_name}} = new LittleEngine::Reflection::ArrayFunctionTuple{
            &ArrayOperator_{{vector_useful_name}}::Set,
            &ArrayOperator_{{vector_useful_name}}::Get,
            &ArrayOperator_{{vector_useful_name}}::GetSize,
            &ArrayOperator_{{vector_useful_name}}::GetArrayTypeName,
            &ArrayOperator_{{vector_useful_name}}::GetElementTypeName
         };
        META_REGISTER_ARRAY_TO_MAP("{{{vector_type_name}}}", array_tuple_{{vector_useful_name}});
        {{/vector_defines}}
    {{/vector_exist}}

        // register class type info
        {{#class_need_register}}
        LittleEngine::Reflection::ClassFunctionTuple* class_function_tuple_{{class_name}}=new LittleEngine::Reflection::ClassFunctionTuple{
            &TypeOperator_{{class_name}}::ConstructorWithJson,
            &TypeOperator_{{class_name}}::WriteByName,
            &TypeOperator_{{class_name}}::GetBaseClassIds,
            &TypeOperator_{{class_name}}::ConstructorNew,
            &TypeOperator_{{class_name}}::IsAbstract,
            &TypeOperator_{{class_name}}::GetMetaData,
            &TypeOperator_{{class_name}}::IsEnum,
              };
        META_REGISTER_BASE_CLASS_TO_MAP("{{class_full_name}}", class_function_tuple_{{class_name}}, {{class_type_id}});
        {{/class_need_register}}

        
        {{#class_is_enum}}
        LittleEngine::Reflection::EnumFunctionTuple* class_enum_tuple_{{class_name}}=new LittleEngine::Reflection::EnumFunctionTuple{
            &LittleEngine::EnumNameVector_{{class_full_code_name}},
            &LittleEngine::EnumValueVector_{{class_full_code_name}},
            &LittleEngine::EnumToString_{{class_full_code_name}},
            &LittleEngine::EnumFromString_{{class_full_code_name}},
              };
        META_REGISTER_ENUM_TO_MAP("{{class_full_name}}", class_enum_tuple_{{class_name}}, {{class_type_id}});
    
        {{/class_is_enum}}
    }
}
{{/class_defines}}


namespace LittleEngine::Reflection::TypeWrappersRegister{
    void {{sourefile_name_upper_camel_case}}()
    {
    {{#class_defines}} 
        {{class_namespace}}::MetaCodeGen::TypeWrapperRegister_{{class_name}}();
    {{/class_defines}}
    }
}

